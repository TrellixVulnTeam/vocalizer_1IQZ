{"ast":null,"code":"var _jsxFileName = \"/home/pavel/MyDocs/shad/mvp/vocalizer-frontend/src/components/AudioUploader.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone-uploader';\nimport 'react-dropzone-uploader/dist/styles.css';\n\nconst AudioUploader = () => {\n  const getUploadParams = ({\n    meta\n  }) => {\n    const url = 'https://httpbin.org/post';\n    return {\n      url,\n      meta: {\n        fileUrl: `${url}/${encodeURIComponent(meta.name)}`\n      }\n    };\n  };\n\n  const upload = (file, title) => {\n    var formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"file\", file);\n    fetch('http://localhost:8000/upload', {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {},\n      body: formData\n    }).then(response => response.json()).then(success => console.log(success)).catch(error => console.log(error));\n  };\n\n  const handleChangeStatus = ({\n    meta\n  }, status) => {\n    console.log(status, meta);\n  };\n\n  const handleSubmit = (files, allFiles) => {\n    files.forEach(f => upload(f.file, f.meta.name));\n    console.log(files.map(f => f.meta));\n    allFiles.forEach(f => f.remove());\n  };\n\n  return React.createElement(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    onSubmit: handleSubmit,\n    accept: \"audio/mp3\",\n    inputContent: (files, extra) => extra.reject ? 'WAV files only' : 'Drag your audio file',\n    styles: {\n      dropzoneReject: {\n        borderColor: 'red',\n        backgroundColor: '#DAA'\n      },\n      inputLabel: (files, extra) => extra.reject ? {\n        color: 'red'\n      } : {}\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n};\n\nexport default AudioUploader;","map":{"version":3,"sources":["/home/pavel/MyDocs/shad/mvp/vocalizer-frontend/src/components/AudioUploader.js"],"names":["React","Dropzone","AudioUploader","getUploadParams","meta","url","fileUrl","encodeURIComponent","name","upload","file","title","formData","FormData","append","fetch","method","mode","headers","body","then","response","json","success","console","log","catch","error","handleChangeStatus","status","handleSubmit","files","allFiles","forEach","f","map","remove","extra","reject","dropzoneReject","borderColor","backgroundColor","inputLabel","color"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAO,yCAAP;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,eAAe,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AACpC,UAAMC,GAAG,GAAG,0BAAZ;AACA,WAAO;AAAEA,MAAAA,GAAF;AAAOD,MAAAA,IAAI,EAAE;AAAEE,QAAAA,OAAO,EAAG,GAAED,GAAI,IAAGE,kBAAkB,CAACH,IAAI,CAACI,IAAN,CAAY;AAAnD;AAAb,KAAP;AACD,GAHD;;AAMA,QAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,KAAzB;AACAC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBJ,IAAxB;AAEAK,IAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,IAAI,EAAE,SAF8B;AAGpCC,MAAAA,OAAO,EAAE,EAH2B;AAKpCC,MAAAA,IAAI,EAAEP;AAL8B,KAAjC,CAAL,CAMGQ,IANH,CAOEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPd,EAQEF,IARF,CASEG,OAAO,IAAIC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CATb,EAUEG,KAVF,CAWEC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAXX;AAaD,GAlBD;;AAoBA,QAAMC,kBAAkB,GAAG,CAAC;AAAExB,IAAAA;AAAF,GAAD,EAAWyB,MAAX,KAAsB;AAC/CL,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ,EAAoBzB,IAApB;AACD,GAFD;;AAIA,QAAM0B,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxCD,IAAAA,KAAK,CAACE,OAAN,CAAcC,CAAC,IAAIzB,MAAM,CAACyB,CAAC,CAACxB,IAAH,EAASwB,CAAC,CAAC9B,IAAF,CAAOI,IAAhB,CAAzB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACI,GAAN,CAAUD,CAAC,IAAIA,CAAC,CAAC9B,IAAjB,CAAZ;AACA4B,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,CAAC,IAAIA,CAAC,CAACE,MAAF,EAAtB;AACD,GAJD;;AAMA,SACE,oBAAC,QAAD;AACE,IAAA,eAAe,EAAEjC,eADnB;AAEE,IAAA,cAAc,EAAEyB,kBAFlB;AAGE,IAAA,QAAQ,EAAEE,YAHZ;AAIE,IAAA,MAAM,EAAC,WAJT;AAKE,IAAA,YAAY,EAAE,CAACC,KAAD,EAAQM,KAAR,KAAmBA,KAAK,CAACC,MAAN,GAAe,gBAAf,GAAkC,sBALrE;AAME,IAAA,MAAM,EAAE;AACNC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,WAAW,EAAE,KAAf;AAAsBC,QAAAA,eAAe,EAAE;AAAvC,OADV;AAENC,MAAAA,UAAU,EAAE,CAACX,KAAD,EAAQM,KAAR,KAAmBA,KAAK,CAACC,MAAN,GAAe;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAf,GAAkC;AAF3D,KANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAaD,CAlDD;;AAoDA,eAAezC,aAAf","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone-uploader'\nimport 'react-dropzone-uploader/dist/styles.css'\n\nconst AudioUploader = () => {\n  const getUploadParams = ({ meta }) => {\n    const url = 'https://httpbin.org/post'\n    return { url, meta: { fileUrl: `${url}/${encodeURIComponent(meta.name)}` } }\n  }\n\n\n  const upload = (file, title) => {\n    var formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"file\", file)\n\n    fetch('http://localhost:8000/upload', {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n      },\n      body: formData\n    }).then(\n      response => response.json()\n    ).then(\n      success => console.log(success)\n    ).catch(\n      error => console.log(error)\n    );\n  };\n\n  const handleChangeStatus = ({ meta }, status) => {\n    console.log(status, meta)\n  }\n\n  const handleSubmit = (files, allFiles) => {\n    files.forEach(f => upload(f.file, f.meta.name))\n    console.log(files.map(f => f.meta))\n    allFiles.forEach(f => f.remove())\n  }\n\n  return (\n    <Dropzone\n      getUploadParams={getUploadParams}\n      onChangeStatus={handleChangeStatus}\n      onSubmit={handleSubmit}\n      accept=\"audio/mp3\"\n      inputContent={(files, extra) => (extra.reject ? 'WAV files only' : 'Drag your audio file')}\n      styles={{\n        dropzoneReject: { borderColor: 'red', backgroundColor: '#DAA' },\n        inputLabel: (files, extra) => (extra.reject ? { color: 'red' } : {}),\n      }}\n    />\n  )\n}\n\nexport default AudioUploader\n"]},"metadata":{},"sourceType":"module"}